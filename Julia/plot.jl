# Learn about API authentication here: https://plot.ly/julia/getting-started
# Find your api_key here: https://plot.ly/settings/api

using Plotly

#liste de gradient de couleurs de bleu Ã  vert sur 17 pas
listcolorsgrad = ["rgb(101, 87, 244)", #1
              "rgb(86, 96, 243)",  #2
              "rgb(86, 119, 243)", #3
              "rgb(86, 142, 243)", #4
              "rgb(85, 165, 243)", #5
              "rgb(85, 188, 243)", #6
              "rgb(85, 211, 243)", #7
              "rgb(85, 235, 243)", #8
              "rgb(84, 243, 228)", #9
              "rgb(84, 243, 204)", #10
              "rgb(84, 243, 181)", #11
              "rgb(84, 243, 157)", #12
              "rgb(83, 243, 133)", #13
              "rgb(83, 243, 109)", #14
              "rgb(83, 243, 85)",  #15
              "rgb(104, 243, 83)", #16
              "rgb(128, 242, 82)"] #17

function plotBidprice(listofbidprices, listcolors = listcolorsgrad)
  data = []
  trace1 = [
    "x" => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17],
    "y" => listofbidprices,
    "name" => "Timeframe 1",
    "marker" => ["color" => listcolors],
    "type" => "bar"
  ]
  append!(data,[trace1])

  layout = [
    "title" => "Bid-price Evolution",
    "xaxis" => ["tickfont" => [
        "size" => 14,
        "color" => "rgb(107, 107, 107)"
      ]],
    "yaxis" => [
      "title" => "Bid-price value",
      "titlefont" => [
        "size" => 16,
        "color" => "rgb(107, 107, 107)"
      ],
      "tickfont" => [
        "size" => 14,
        "color" => "rgb(107, 107, 107)"
      ]
    ],
    "legend" => [
      "x" => 0,
      "y" => 1.0,
      "bgcolor" => "rgba(255, 255, 255, 0)",
      "bordercolor" => "rgba(255, 255, 255, 0)"
    ],
    "barmode" => "group",
    "bargap" => 0.1,
    "bargroupgap" => 0
  ]
  response = Plotly.plot(data, ["layout" => layout, "filename" => "style-bar", "fileopt" => "overwrite"])
  plot_url = response["url"]
end

function plotCapacity(listoflegs, listoflistofcapacity, capacity, listcolors = listcolorsgrad)
  trace1 = [
    "x" => listoflegs,
    "y" => listoflistofcapacity[17],
    "name" => "TimeFrame 17",
    "marker" => ["color" => listcolors[1]],
    "type" => "bar"
  ]
  trace2 = [
    "x" => listoflegs,
    "y" => listoflistofcapacity[16],
    "name" => "TimeFrame 16",
    "marker" => ["color" => listcolors[2]],
    "type" => "bar"
  ]
  trace3 = [
    "x" => listoflegs,
    "y" => listoflistofcapacity[15],
    "name" => "TimeFrame 15",
    "marker" => ["color" => listcolors[3]],
    "type" => "bar"
  ]
  trace4 = [
    "x" => listoflegs,
    "y" => listoflistofcapacity[14],
    "marker" => ["color" => listcolors[4]],
    "name" => "TimeFrame 14",
    "type" => "bar"
  ]
  trace5 = [
    "x" => listoflegs,
    "y" => listoflistofcapacity[13],
    "name" => "TimeFrame 13",
    "marker" => ["color" => listcolors[5]],
    "type" => "bar"
  ]
  trace6 = [
    "x" => listoflegs,
    "y" => listoflistofcapacity[12],
    "name" => "TimeFrame 12",
    "marker" => ["color" => listcolors[6]],
    "type" => "bar"
  ]
  trace7 = [
    "x" => listoflegs,
    "y" => listoflistofcapacity[11],
    "name" => "TimeFrame 11",
    "marker" => ["color" => listcolors[7]],
    "type" => "bar"
  ]
  trace8 = [
    "x" => listoflegs,
    "y" => listoflistofcapacity[10],
    "name" => "TimeFrame 10",
    "marker" => ["color" => listcolors[8]],
    "type" => "bar"
  ]
  trace9 = [
    "x" => listoflegs,
    "y" => listoflistofcapacity[9],
    "name" => "TimeFrame 9",
    "marker" => ["color" => listcolors[9]],
    "type" => "bar"
  ]
  trace10 = [
    "x" => listoflegs,
    "y" => listoflistofcapacity[8],
    "name" => "TimeFrame 8",
    "marker" => ["color" => listcolors[10]],
    "type" => "bar"
  ]
  trace11 = [
    "x" => listoflegs,
    "y" => listoflistofcapacity[7],
    "name" => "TimeFrame 7",
    "marker" => ["color" => listcolors[11]],
    "type" => "bar"
  ]
  trace12 = [
    "x" => listoflegs,
    "y" => listoflistofcapacity[6],
    "name" => "TimeFrame 6",
    "marker" => ["color" => listcolors[12]],
    "type" => "bar"
  ]
  trace13 = [
    "x" => listoflegs,
    "y" => listoflistofcapacity[5],
    "name" => "TimeFrame 5",
    "marker" => ["color" => listcolors[13]],
    "type" => "bar"
  ]
  trace14 = [
    "x" => listoflegs,
    "y" => listoflistofcapacity[4],
    "name" => "TimeFrame 4",
    "marker" => ["color" => listcolors[14]],
    "type" => "bar"
  ]
  trace15 = [
    "x" => listoflegs,
    "y" => listoflistofcapacity[3],
    "name" => "TimeFrame 3",
    "marker" => ["color" => listcolors[15]],
    "type" => "bar"
  ]
  trace16 = [
    "x" => listoflegs,
    "y" => listoflistofcapacity[2],
    "name" => "TimeFrame 2",
    "marker" => ["color" => listcolors[16]],
    "type" => "bar"
  ]
  trace17 = [
    "x" => listoflegs,
    "y" => listoflistofcapacity[1],
    "name" => "TimeFrame 1",
    "marker" => ["color" => listcolors[17]],
    "type" => "bar"
  ]
  # trace18 = [
  #   "x" => listoflegs,
  #   "y" => capacity,
  #   "name" => "Capacity left",
  #   "marker" => ["color" => "rgb(223, 12, 28)"],
  #   "type" => "bar"
  # ]
  data = [trace1, trace2, trace3, trace4,trace5, trace6, trace7, trace8,
          trace9, trace10, trace11, trace12,trace13, trace14, trace15, trace16,
          trace17]#, trace18]
  layout = ["barmode" => "stack",
            "title" => "Seats sold by flight for each TimeFrame",
            "xaxis" => ["tickfont" => [
                "size" => 14,
                "color" => "rgb(107, 107, 107)"
              ]],
            "yaxis" => [
              "title" => "Seats sold",
              "titlefont" => [
                "size" => 16,
                "color" => "rgb(107, 107, 107)"
              ]]]
  response = Plotly.plot(data, ["layout" => layout, "filename" => "stacked-bar", "fileopt" => "overwrite"])
  plot_url = response["url"]
end

function plotMonteCarlo(listcolors = listcolorsgrad)
  echelle = [1500000 + 10000*k for k = 1:40]
  tab = [1719522, 1716104, 1751443, 1673331, 1687562, 1699837, 1682598, 1647059, 1734857, 1672360, 1773991, 1713369, 1674809, 1739548, 1676326, 1676180, 1689509, 1740517, 1667019, 1679515, 1701650, 1649332, 1660596, 1680880, 1706351, 1775743, 1708054, 1709102, 1710075, 1724906, 1700454, 1684414, 1632132, 1697357, 1702980, 1739086, 1725422, 1654374, 1782313, 1656411, 1745365, 1699661, 1704686, 1665738, 1663043, 1728255, 1714259, 1784708, 1716668, 1755953, 1687662, 1705840, 1685539, 1658846, 1650702, 1701320, 1718594, 1716031, 1708421, 1709990, 1677040, 1692618, 1761083, 1731473, 1676463, 1730496, 1711108, 1708882, 1762849, 1724358, 1686385, 1719024, 1722673, 1688556, 1714990, 1666688, 1627528, 1785713, 1687903, 1722809, 1745681, 1671225, 1745780, 1711894, 1707979, 1732072, 1700177, 1675845, 1724452, 1664445, 1655067, 1742041, 1727584, 1680168, 1739958, 1695372, 1698371, 1698186, 1707542, 1733128, 1741879, 1698665, 1677893, 1712363, 1740735, 1679895, 1738278, 1654954, 1716617, 1755962, 1748367, 1723334, 1685998, 1688229, 1771917, 1682465, 1678649, 1659981, 1732689, 1741834, 1636082, 1736707, 1685526, 1739902, 1684396, 1634300, 1713979, 1710396, 1693929, 1717326, 1707298, 1710086, 1679185, 1684075, 1697291, 1708432, 1727402, 1714882, 1725337, 1658000, 1716684, 1706343, 1729458, 1727635, 1682023, 1713736, 1716531, 1719457, 1721614, 1718928, 1758728, 1698717, 1705464, 1692509, 1752934, 1698920, 1714617, 1652103, 1733207, 1688637, 1693352, 1736206, 1727325, 1729232, 1686856, 1761963, 1729472, 1714315, 1695578, 1655764, 1717719, 1749885, 1699485, 1681913, 1741700, 1715428, 1743175, 1770919, 1720067, 1745398, 1739119, 1658669, 1721895, 1656037, 1759734, 1724144, 1694205, 1729633, 1689033, 1722323, 1713041, 1687902, 1695850, 1651354, 1773547, 1683743, 1709616, 1721739, 1716141, 1733503, 1718107, 1693884, 1750273, 1732621, 1701214, 1641915, 1627548, 1694577, 1702473, 1695911, 1703917, 1743166, 1725865, 1671024, 1706195, 1659019, 1645408, 1678277, 1709829, 1691115, 1682514, 1722500, 1664859, 1679633, 1716235, 1739582, 1707625, 1708363, 1721461, 1701439, 1727189, 1672337, 1718066, 1735218, 1762996, 1675550, 1687430, 1753689, 1728503, 1664510, 1727962, 1733680, 1702959, 1708152, 1686642, 1719255, 1711748, 1671341, 1741216, 1694366, 1659561, 1768989, 1691528, 1727697, 1711392, 1725103, 1732589, 1701093, 1715573, 1680059, 1720428, 1729117, 1671651, 1688005, 1673461, 1661948, 1691740, 1686185, 1722250, 1752378, 1696654, 1677171, 1707189, 1708571, 1711785, 1716111, 1720837, 1709511, 1707494, 1677412, 1790620, 1682970, 1739964, 1673285, 1683418, 1672180, 1726061, 1735749, 1721957, 1660699, 1724766, 1777408, 1688698, 1745999, 1663681, 1663999, 1723327, 1676841, 1679916, 1703938, 1687483, 1718969, 1699621, 1736081, 1706783, 1691711, 1697058, 1646841, 1731937, 1681759, 1698309, 1741149, 1727655, 1715677, 1747016, 1674995, 1681083, 1660478, 1749021, 1736999, 1665357, 1724133, 1692545, 1687505, 1679178, 1673934, 1736663, 1605079, 1781372, 1690830, 1700383, 1659281, 1652369, 1730659, 1691950, 1705828, 1722052, 1732394, 1693866, 1714225, 1675254, 1678798, 1635232, 1676745, 1704475, 1627774, 1746156, 1683091, 1666250, 1688238, 1707411, 1652699, 1747316, 1724465, 1653309, 1704558, 1703135, 1689007, 1720530, 1679264, 1676816, 1680715, 1758335, 1660781, 1727515, 1701127, 1728110, 1704444, 1709681, 1748096, 1676357, 1728539, 1695283, 1681959, 1699469, 1714696, 1731586, 1721178, 1740300, 1673991, 1747537, 1648417, 1684928, 1689361, 1785627, 1771231, 1675133, 1699717, 1775603, 1694115, 1667685, 1732278, 1729063, 1680833, 1756027, 1697283, 1683278, 1637599, 1687604, 1733813, 1704201, 1734952, 1625205, 1610750, 1725082, 1689488, 1738115, 1727788, 1667352, 1661605, 1681841, 1728377, 1639384, 1669906, 1738423, 1755086, 1739314, 1705262, 1694220, 1729277, 1748867, 1759800, 1688069, 1722628, 1722862, 1709512, 1757281, 1680300, 1721697, 1743723, 1680312, 1713175, 1714615, 1683328, 1770525, 1693490, 1721675, 1657096, 1697491, 1696455, 1687239, 1696714, 1716570, 1726123, 1670260, 1597537, 1651774, 1686262, 1741497, 1674433, 1724575, 1673026, 1685346, 1684877, 1722338, 1712771, 1693857, 1695234, 1646523, 1691774, 1704940, 1719536, 1747626, 1702704, 1628238, 1677686, 1693792, 1714734, 1693385, 1674064, 1734641, 1720959, 1703852, 1749612, 1714382, 1710953, 1769589, 1683889, 1656421, 1709556, 1641259, 1678821, 1703369, 1704596, 1650577, 1776979, 1693474, 1710770, 1695397, 1704572, 1732323, 1706483, 1661841, 1728424, 1665139, 1701889, 1693324, 1709547, 1708861, 1653163, 1773209, 1670804, 1657543, 1685671, 1712439, 1738287, 1719472, 1662716, 1659825, 1705928, 1688334, 1709568, 1690415, 1719518, 1675737, 1757415, 1736937, 1786095, 1770006, 1744195, 1716210, 1767742, 1726144, 1747290, 1705769, 1684721, 1668473, 1733488, 1699117, 1762168, 1699684, 1709730, 1748574, 1748528, 1756352, 1703256, 1780026, 1678158, 1735643, 1711106, 1726713, 1716803, 1739401, 1664752, 1768885, 1689078, 1726946, 1724221, 1737054, 1693501, 1694423, 1666652, 1717487, 1719129, 1677718, 1754967, 1688236, 1690503, 1699210, 1719018, 1741019, 1690779, 1727959, 1756843, 1671596, 1682634, 1664275, 1727641, 1681890, 1722256, 1640471, 1678674, 1688122, 1684082, 1688597, 1690116, 1696121, 1685649, 1683999, 1705773, 1679792, 1747165, 1721084, 1629286, 1708297, 1667635, 1753490, 1690687, 1689615, 1688954, 1695821, 1721200, 1749493, 1784366, 1720691, 1693680, 1715103, 1661888, 1729460, 1725762, 1719462, 1685338, 1673871, 1739850, 1683658, 1758795, 1691562, 1667399, 1675348, 1700162, 1757066, 1695429, 1714775, 1670861, 1698751, 1730108, 1728124, 1682381, 1722562, 1697527, 1705887, 1719257, 1683224, 1733423, 1687222, 1765071, 1704086, 1731945, 1726838, 1727538, 1682606, 1714862, 1671842, 1700646, 1713940, 1682468, 1725862, 1694854, 1695629, 1759741, 1693167, 1701924, 1665661, 1733137, 1681771, 1729834, 1732363, 1691410, 1718550, 1727268, 1716366, 1744696, 1709464, 1680602, 1714782, 1673746, 1684113, 1676076, 1777685, 1710199, 1684216, 1671857, 1729519, 1688375, 1709568, 1662037, 1709255, 1686344, 1735500, 1700872, 1689617, 1718003, 1797050, 1747181, 1743269, 1720116, 1689016, 1720462, 1781831, 1703985, 1666585, 1704185, 1655838, 1743680, 1715738, 1697781, 1739707, 1663119, 1689644, 1724630, 1738920, 1674366, 1699941, 1696132, 1734642, 1661304, 1717863, 1666672, 1695847, 1707082, 1716062, 1707798, 1666024, 1685739, 1659661, 1731742, 1677014, 1733428, 1746493, 1719336, 1745142, 1689296, 1676392, 1749141, 1713693, 1742148, 1719820, 1671158, 1717970, 1693972, 1702153, 1754940, 1732771, 1711509, 1691791, 1690120, 1669711, 1691410, 1702328, 1768389, 1709586, 1672342, 1666664, 1675821, 1757891, 1669435, 1731888, 1735839, 1678610, 1645944, 1655509, 1734610, 1682009, 1745447, 1731937, 1635614, 1764170, 1701223, 1708245, 1782359, 1766681, 1669653, 1765549, 1705283, 1702642, 1734646, 1704760, 1729056, 1668996, 1704702, 1688493, 1699167, 1687416, 1648949, 1695893, 1712372, 1673494, 1727557, 1723631, 1714134, 1710240, 1744512, 1691242, 1709451, 1693574, 1686873, 1661933, 1697153, 1705262, 1759771, 1685027, 1688931, 1740432, 1717228, 1662196, 1687681, 1696843, 1708428, 1703122, 1660001, 1691697, 1736631, 1704792, 1713092, 1692382, 1664719, 1690210, 1711000, 1697513, 1664628, 1696707, 1723550, 1787140, 1715810, 1699359, 1727094, 1701573, 1799890, 1737204, 1703471, 1746059, 1713369, 1686014, 1691060, 1638991, 1668139, 1712643, 1687565, 1751796, 1694499, 1758751, 1683699, 1768382, 1673039, 1743951, 1694203, 1747405, 1793228, 1771319, 1713257, 1773010, 1698264, 1719477, 1679903, 1674841, 1727285, 1670785, 1721079, 1739652, 1668341, 1672224, 1692065, 1732166, 1715210, 1721308, 1684069, 1715749, 1692455, 1716648, 1680228, 1706968, 1701733, 1760161, 1664221, 1672732, 1699044, 1708866, 1697441, 1656311, 1684318, 1683360, 1746990, 1680043, 1696836, 1688049, 1736230, 1751093, 1655573, 1671331, 1739133, 1705151, 1682265, 1692419, 1741012, 1673392, 1716119, 1665377, 1707798, 1759358, 1697077, 1698630, 1650575, 1704015, 1672415, 1769547, 1743651, 1707904, 1704573, 1762931, 1735941, 1682984, 1730397, 1778057, 1705625, 1769176, 1702129, 1661381, 1738653, 1652974, 1669972, 1691017, 1671793, 1753064, 1710976, 1745254, 1743299, 1779694, 1723863, 1664914, 1701982, 1657267, 1718848, 1689838, 1702195, 1680769, 1706631, 1669881, 1703610, 1673819, 1679548, 1676833, 1708636, 1692098, 1732239, 1677519, 1695262, 1671455, 1728781, 1705967, 1682779, 1700967, 1705267, 1703942, 1736053, 1700197, 1652091, 1749103, 1695568, 1748974, 1742834, 1757457, 1727959, 1663677, 1670656, 1620641, 1666668, 1685766, 1647939, 1719353, 1689395, 1737389, 1709837, 1666356, 1809449, 1696988, 1745121, 1713385, 1666399, 1710531, 1711449, 1689540, 1694422, 1707364, 1782303, 1717301, 1738049, 1744847, 1707343, 1710384, 1721803, 1649391, 1659400, 1739206, 1679550, 1671784, 1759103, 1628288, 1715983, 1663355, 1699590, 1731362, 1733598, 1679288, 1660688, 1725662, 1665103, 1768159, 1713817, 1698028, 1689066, 1694263, 1727567, 1678526, 1736352, 1707815, 1679501, 1654615, 1706002, 1733095, 1697052]
  results = [0 for k = 1:40]
  for i = 1:1000
    results[round(Int,((tab[i]-1500000)/10000))] += 1
  end
  trace1 = [
    "x" => echelle,
    "y" => results,
    "marker" => ["color" => listcolors[1]],
    "type" => "bar"
  ]
  data = [trace1]
  layout = ["barmode" => "stack",
            "title" => "MonteCarlo results for deterministic method",
            "xaxis" => ["tickfont" => [
                "size" => 14,
                "color" => "rgb(107, 107, 107)"
              ]],
            "yaxis" => [
              "title" => "number of occurences",
              "titlefont" => [
                "size" => 16,
                "color" => "rgb(107, 107, 107)"
              ]],
              "xaxis" => [
                "title" => "revenue",
                "titlefont" => [
                  "size" => 16,
                  "color" => "rgb(107, 107, 107)"
                ]]]
  response = Plotly.plot(data, ["layout" => layout, "filename" => "stacked-bar", "fileopt" => "overwrite"])
  plot_url = response["url"]
end
